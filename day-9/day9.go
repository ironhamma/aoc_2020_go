package day9

import (
	"bufio"
	"fmt"
	"os"
	"sort"
	"strconv"
	"time"
)

//Generated by AoC helper tool for day 9 🎄
//In order to get started, extend main.go so it discovers and runs this file as well

type Day9Solver struct{}

func checkNumbers(nums []int, toCheck int, preamble int) bool {
	cutted := nums[len(nums)-preamble:]
	for _, first := range cutted {
		for _, second := range cutted {
			if (first + second) == toCheck {
				return true
			}
		}
	}
	return false
}

func (d Day9Solver) Solve(filename string, answerChan chan int, doneChan chan bool, errorChan chan error) {
	start := time.Now()

	defer close(answerChan)
	defer close(errorChan)
	defer close(doneChan)
	file, err := os.Open(filename)

	if err != nil {
		errorChan <- err
	}

	defer file.Close()

	scanner := bufio.NewScanner(file)

	nums := []int{}

	for scanner.Scan() {
		line := scanner.Text()

		num, _ := strconv.ParseInt(line, 10, 64)
		nums = append(nums, int(num))
	}

	preamble := 25

	curr := []int{}
	result := 0

	for _, number := range nums {
		isGood := true
		if len(curr) > preamble {
			isGood = checkNumbers(curr, number, preamble)

			if !isGood {
				result = number
				break
			}
		}
		curr = append(curr, number)
	}

	nums = curr
	found := false
	sorters := []int{}

	for i := 0; i < len(nums); i++ {
		sorters = []int{}
		sum := 0
		for _, value := range nums[len(nums)-i:] {
			sum += value
			sorters = append(sorters, value)
			if sum == result {
				found = true
				break
			}
		}
		if found {
			break
		}
	}

	sort.Ints(sorters)

	res2 := sorters[0] + sorters[len(sorters)-1]

	answerChan <- result
	answerChan <- res2

	end := time.Now()
	elapsed := end.Sub(start)
	fmt.Printf("\n\n⏱️ Execution took %v time! ⏱️\n\n", elapsed)

	doneChan <- true
}
