package day10

import (
	"bufio"
	"fmt"
	"os"
	"sort"
	"strconv"
	"time"
)

//Generated by AoC helper tool for day 10 🎄
//In order to get started, extend main.go so it discovers and runs this file as well

type Day10Solver struct{}

type Adapter struct {
	rating int
}

func (d Day10Solver) Solve(filename string, answerChan chan int, doneChan chan bool, errorChan chan error) {
	start := time.Now()

	defer close(answerChan)
	defer close(errorChan)
	defer close(doneChan)
	file, err := os.Open(filename)

	if err != nil {
		errorChan <- err
	}

	defer file.Close()

	scanner := bufio.NewScanner(file)

	adapters := []Adapter{{rating: 0}}

	i := 1
	max := 0
	for scanner.Scan() {
		line := scanner.Text()
		num, _ := strconv.ParseInt(line, 10, 64)
		if int(num) > max {
			max = int(num)
		}
		adapters = append(adapters, Adapter{rating: int(num)})
		i++
	}
	adapters = append(adapters, Adapter{rating: max + 3})

	adapterMap := make(map[int]Adapter)
	for _, adp := range adapters {
		adapterMap[adp.rating] = adp
	}

	sort.Slice(adapters, func(i, j int) bool {
		return adapters[i].rating < adapters[j].rating
	})

	oneDiff := 0
	threeDiff := 0

	for i := 1; i < len(adapters); i++ {
		diff := adapters[i].rating - adapters[i-1].rating
		if diff == 1 {
			oneDiff++
		} else if diff == 3 {
			threeDiff++
		}
	}
	ways := make(map[int]int)
	ways[0] = 1

	for _, adapter := range adapters {
		rating := adapter.rating
		if _, exists := ways[rating-1]; exists {
			ways[rating] += ways[rating-1]
		}
		if _, exists := ways[rating-2]; exists {
			ways[rating] += ways[rating-2]
		}
		if _, exists := ways[rating-3]; exists {
			ways[rating] += ways[rating-3]
		}
	}

	totalArrangements := ways[max+3]

	result := oneDiff * threeDiff

	answerChan <- result
	answerChan <- totalArrangements

	end := time.Now()
	elapsed := end.Sub(start)
	fmt.Printf("\n\n⏱️ Execution took %v time! ⏱️\n\n", elapsed)
	time.Sleep(time.Second)
	doneChan <- true
}
