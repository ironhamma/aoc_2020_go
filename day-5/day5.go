package day5

import (
	"bufio"
	"fmt"
	"os"
	"sort"
	"strings"
	"time"
)

//Generated by AoC helper tool 🎄
//In order to get started, extend main.go so it discovers and runs this file as well

type Day5Solver struct{}

func calculateSeatID(pass string) int {
	pass = strings.ReplaceAll(pass, "F", "0")
	pass = strings.ReplaceAll(pass, "B", "1")
	pass = strings.ReplaceAll(pass, "L", "0")
	pass = strings.ReplaceAll(pass, "R", "1")

	rowPart := pass[:7]
	colPart := pass[7:]

	row := binaryToInt(rowPart)
	col := binaryToInt(colPart)

	return (row * 8) + col
}

func binaryToInt(binary string) int {
	var value int
	for _, char := range binary {
		value = value*2 + int(char-'0')
	}
	return value
}

func findYourSeat(seatIDs []int) int {
	sort.Ints(seatIDs)

	for i := 1; i < len(seatIDs); i++ {
		if seatIDs[i] != seatIDs[i-1]+1 {
			return seatIDs[i-1] + 1
		}
	}

	return -1
}

func (d Day5Solver) Solve(filename string, answerChan chan int, doneChan chan bool, errorChan chan error) {
	start := time.Now()
	defer close(answerChan)
	defer close(errorChan)
	defer close(doneChan)
	file, err := os.Open(filename)

	if err != nil {
		errorChan <- err
	}

	defer file.Close()

	scanner := bufio.NewScanner(file)

	var seatIDs []int
	maxSeatID := 0

	for scanner.Scan() {
		boardingPass := scanner.Text()
		seatID := calculateSeatID(boardingPass)
		seatIDs = append(seatIDs, seatID)

		if seatID > maxSeatID {
			maxSeatID = seatID
		}
	}

	if err := scanner.Err(); err != nil {
		errorChan <- err
	}

	yourSeatID := findYourSeat(seatIDs)

	answerChan <- maxSeatID
	answerChan <- yourSeatID

	end := time.Now()
	elapsed := end.Sub(start)
	fmt.Printf("\n\n⏱️ Execution took %v time! ⏱️\n\n", elapsed)

	time.Sleep(time.Second)
	doneChan <- true
}
