package day4

import (
	"bufio"
	"fmt"
	"os"
	"regexp"
	"strconv"
	"strings"
	"time"
)

//Generated by AoC helper tool 🎄
//In order to get started, extend main.go so it discovers and runs this file as well

type Day4Solver struct{}

type Passport struct {
	birth  int
	issue  int
	exp    int
	height string
	hair   string
	eyes   string
	pid    string
	cid    string
}

func (p *Passport) Check() bool {
	if p.birth != -1 && p.issue != -1 && p.exp != -1 && p.height != "-1" && p.hair != "-1" && p.eyes != "-1" && p.pid != "-1" {
		return true
	}
	return false
}

func (p *Passport) Check2() bool {
	if p.birth == -1 || p.issue == -1 || p.exp == -1 || p.height == "-1" || p.hair == "-1" || p.eyes == "-1" || p.pid == "-1" {
		return false
	}

	byear := strconv.Itoa(p.birth)
	iyear := strconv.Itoa(p.issue)
	eyear := strconv.Itoa(p.exp)

	if p.birth > 2002 || p.birth < 1910 || len(byear) != 4 {
		return false
	}

	if p.issue > 2020 || p.issue < 2010 || len(iyear) != 4 {
		return false
	}

	if p.exp > 2030 || p.exp < 2020 || len(eyear) != 4 {
		return false
	}

	if !strings.Contains(p.height, "cm") && !strings.Contains(p.height, "in") {
		return false
	}

	isCenti := p.height[len(p.height)-2] == 'c'

	if isCenti {
		sp := strings.Split(p.height, "c")
		cm, _ := strconv.ParseInt(sp[0], 10, 64)
		if cm < 150 || cm > 193 {
			return false
		}
	} else {
		sp := strings.Split(p.height, "i")
		inch, _ := strconv.ParseInt(sp[0], 10, 64)
		if inch < 59 || inch > 76 {
			return false
		}
	}

	if !strings.Contains(p.hair, "#") {
		return false
	}
	hair := strings.Split(p.hair, "#")

	if len(hair[1]) != 6 {
		return false
	}

	re := regexp.MustCompile("^[0-9a-f]+$")

	if !re.MatchString(hair[1]) {
		return false
	}

	validEyes := []string{"amb", "blu", "brn", "gry", "grn", "hzl", "oth"}

	isValidEyes := false

	for _, eye := range validEyes {
		if eye == p.eyes {
			isValidEyes = true
		}
	}

	if !isValidEyes {
		return false
	}

	if len(p.pid) != 9 {
		return false
	}

	return true
}

func (d Day4Solver) Solve(filename string, answerChan chan int, doneChan chan bool, errorChan chan error) {
	start := time.Now()
	defer close(answerChan)
	defer close(errorChan)
	defer close(doneChan)
	file, err := os.Open(filename)

	if err != nil {
		errorChan <- err
	}

	defer file.Close()

	scanner := bufio.NewScanner(file)

	readData := []string{}
	passData := []string{}

	passports := []Passport{}

	for scanner.Scan() {
		line := scanner.Text()

		if len(line) == 0 {
			for _, val := range readData {
				passData = append(passData, strings.Split(val, " ")...)
			}
			pass := Passport{
				birth:  -1,
				issue:  -1,
				exp:    -1,
				height: "-1",
				hair:   "-1",
				eyes:   "-1",
				pid:    "-1",
				cid:    "-1",
			}
			for _, val := range passData {
				split := strings.Split(val, ":")

				switch split[0] {
				case "byr":
					year, _ := strconv.ParseInt(split[1], 10, 64)
					pass.birth = int(year)
				case "iyr":
					year, _ := strconv.ParseInt(split[1], 10, 64)
					pass.issue = int(year)
				case "eyr":
					year, _ := strconv.ParseInt(split[1], 10, 64)
					pass.exp = int(year)
				case "hgt":
					pass.height = split[1]
				case "hcl":
					pass.hair = split[1]
				case "ecl":
					pass.eyes = split[1]
				case "pid":
					pass.pid = split[1]
				case "cid":
					pass.cid = split[1]
				}
			}
			passports = append(passports, pass)
			readData = []string{}
			passData = []string{}
		} else {
			readData = append(readData, line)
		}
	}

	validCounter := 0
	validCounter2 := 0
	for _, pass := range passports {
		isValid := pass.Check()
		isValid2 := pass.Check2()

		if isValid {
			validCounter++
		}

		if isValid2 {
			validCounter2++
		}
	}

	answerChan <- validCounter
	answerChan <- validCounter2

	time.Sleep(time.Second)

	end := time.Now()
	elapsed := end.Sub(start)
	fmt.Printf("\n\n⏱️ Execution took %v time! ⏱️\n\n", elapsed)
	doneChan <- true
}
